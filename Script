    local Plr = game.Players.LocalPlayer
    local Char = Plr.Character
    local Hrp = Char.HumanoidRootPart

    local Fluent = loadstring(game:HttpGet("https://raw.githubusercontent.com/Kazeruy/Fluent/main/NewIcons"))()
    local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
    local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()
    
    local Window = Fluent:CreateWindow({
        Title = "Anime Heroes Simulator | Lyzer Hub",
        SubTitle = identifyexecutor(),
        TabWidth = 120,
        Size = UDim2.fromOffset(520, 360),
        Acrylic = false,
        Theme = "Darker",
        MinimizeKey = Enum.KeyCode.LeftControl
    })
    
    
    local Tabs = {
        Info = Window:AddTab({ Title = "| Script Infos", Icon = "scroll-text" }),
        Farm = Window:AddTab({ Title = "| Farm", Icon = "swords" }),
        Modes = Window:AddTab({ Title = "| Gamemodes", Icon = "joystick" }),
        Summon = Window:AddTab({ Title = "| Star", Icon = "star" }),
        Islands = Window:AddTab({ Title = "| Teleport", Icon = "map-pin" }),
        Gui = Window:AddTab({ Title = "| Guis", Icon = "airplay" }),
        Misc = Window:AddTab({ Title = "| Misc", Icon = "codesandbox" }),
        Webhook = Window:AddTab({ Title = "| Webhook", Icon = "link" }),
        Settings = Window:AddTab({ Title = "| Settings", Icon = "settings" })
    }


        Fluent:Notify({
            Title = "Welcome",
            Content = "Loaded as " .. Plr.DisplayName,
            SubContent = "https://discord.gg/lyzer",
            Duration = 3
        })

        local availableworlds = {"Leaf Village", "Marine Island", "Slayer Village", "Dragon City"}

        local textomob = Tabs.Farm:AddParagraph({
            Title = "Current Mob ",
            Content = "Searching..."
        })
        
        
Tabs.Farm:AddSection("Mob Farm")
local MobsDropdown = Tabs.Farm:AddDropdown("MobDropdown", {
    Title = "Select Mobs",
    Values = {},
    Multi = true,
    Default = {"--REFRESH FIRST--"},
})

local FarmMob = Tabs.Farm:AddToggle("MobsToggle", { Title = "Farm Selected", Default = false })

local selectedMobs = {}

MobsDropdown:OnChanged(function(Value)
    selectedMobs = {}
    for mob, State in pairs(Value) do
        if State then
            table.insert(selectedMobs, mob)
        end
    end
end)

local function farmmob()
    if Plr.Character and Plr.Character:FindFirstChild("HumanoidRootPart") and Plr.Character:FindFirstChild("Humanoid") and Plr.Character.Humanoid.Health > 0 then
        local nearestNPC = nil
        local nearestDistance = math.huge
        local Char = Plr.Character
        local maxDistance = 1000

        for _, child in ipairs(workspace.Server.Enemies.World:GetDescendants()) do
            if child:IsA("Part") and table.find(selectedMobs, child.Name) and child:GetAttribute("Health") and child:GetAttribute("Health") > 0 then
                local distance = (Char.HumanoidRootPart.Position - child.Position).magnitude
                if distance < nearestDistance and distance <= maxDistance then
                    nearestNPC = child
                    nearestDistance = distance
                end
            end
        end

        if nearestNPC then
            if nearestDistance > 10 then
                Char.HumanoidRootPart.CFrame = nearestNPC.CFrame * CFrame.new(0, 0, 4)
            end
            textomob:SetDesc(nearestNPC.Name .. "\nHealth: " .. nearestNPC:GetAttribute("Health"))
        end
    end
end

local function runfarmmob()
    while FarmMob.Value do
        farmmob()
        wait()
    end
end

FarmMob:OnChanged(function()
    if FarmMob.Value then
        runfarmmob()
    end
end)

Plr.CharacterAdded:Connect(function(character)
    Char = character
    if FarmMob.Value then
        runfarmmob()
    end
end)


Tabs.Farm:AddButton({
    Title = "Refresh Mobs",
    Description = "",
    Callback = function()
        local currentworld = workspace.Client.Maps:GetChildren()[1].Name
        local npcSpawns = workspace.Server.Enemies.World[currentworld]:GetChildren()
        local npcNames = {}
        
        for _, npcSpawn in ipairs(npcSpawns) do
            local humanoidRootPart = npcSpawn:IsA("Part")
            if humanoidRootPart then
            local npcName = npcSpawn.Name
            if not table.find(npcNames, npcName) then
                table.insert(npcNames, npcName)
                end
            end
        end
        MobsDropdown:SetValues(npcNames)
    end
})

        Tabs.Farm:AddSection("Others")

        local function Click()
            game:GetService("VirtualUser"):ClickButton1(Vector2.new(9e9, 9e9))              
        end
        
        local AutoClick = Tabs.Farm:AddToggle("ClickToggle", {Title = "Auto Click", Default = false})

        AutoClick:OnChanged(function()
            while AutoClick.Value do wait()
                Click()        
            end
        end)

        local MagnetToggle = Tabs.Farm:AddToggle("CollectToggle", {Title = "Collect Drops", Default = false})

        MagnetToggle:OnChanged(function()
            while MagnetToggle.Value do
                wait()
        
                local drops = workspace.Debris:GetChildren()
                for _, drop in ipairs(drops) do
                    local collider = drop:FindFirstChild("UID")
                    if drop and collider then
                        if drop.Name ~= "Part" and drop:IsA("Part") and drop:GetAttribute("CanPick") then
                            drop.CanCollide = false
                            drop.CFrame = Char.HumanoidRootPart.CFrame
                        end
                    end
                end
            end
        end)     

        local FarmNearest = Tabs.Farm:AddToggle("NearestToggle", { Title = "Auto Farm Nearest", Default = false })

        local function farmrandommob()
            if Plr.Character and Plr.Character:FindFirstChild("HumanoidRootPart") and Plr.Character:FindFirstChild("Humanoid") and Plr.Character.Humanoid.Health > 0 then
                local nearestNPC = nil
                local nearestDistance = math.huge
                local Char = Plr.Character
                local maxDistance = 1000
        
                for _, child in ipairs(workspace.Server.Enemies.World:GetDescendants()) do
                    if child:IsA("Part") and child:GetAttribute("Health") and child:GetAttribute("Health") > 0 then
                        local distance = (Char.HumanoidRootPart.Position - child.Position).magnitude
                        if distance < nearestDistance and distance <= maxDistance then
                            nearestNPC = child
                            nearestDistance = distance
                        end
                    end
                end
        
                if nearestNPC then
                    if nearestDistance > 10 then
                        Char.HumanoidRootPart.CFrame = nearestNPC.CFrame * CFrame.new(0, 0, 4)
                    end
                    textomob:SetDesc(nearestNPC.Name .. "\nHealth: " .. nearestNPC:GetAttribute("Health"))
                end
            end
        end
        
        local function runfarmrandommob()
            while FarmNearest.Value do
                farmrandommob()
                wait()
            end
        end
        
        FarmNearest:OnChanged(function()
            if FarmNearest.Value then
                runfarmrandommob()
            end
        end)
        
        Plr.CharacterAdded:Connect(function(character)
            Char = character
            if FarmNearest.Value then
                runfarmrandommob()
            end
        end)

        Tabs.Modes:AddSection("Game Modes")
        local gameModes = {"Ninja Tournament", "Treasure Hunt", "Ghost Train", "Dragon Tournament"}
        
        local SelectedMode = Tabs.Modes:AddDropdown("ModeDropdown", {
            Title = "Select Mode",
            Values = gameModes,
            Multi = false,
            Default = 1,
        })
        local modeTeleport = {
            ["Ninja Tournament"] = "Leaf Village",
            ["Treasure Hunt"] = "Marine Island",
            ["Ghost Train"] = "Slayer Village",
            ["Dragon Tournament"] = "Dragon City"
        }
        
        local ToggleMode = Tabs.Modes:AddToggle("ModeToggle", {Title = "Auto Mode", Default = false })
        
        local function openMode(mode)
            while ToggleMode.Value do wait()
            if not Plr.PlayerGui.UI.HUD.Gamemodes:FindFirstChild(mode:gsub(" ", "")).Visible then
                local args = {
                    [1] = "Gamemodes_" .. mode:gsub(" ", ""),
                    [2] = "Start",
                    [3] = "Friends"
                }
                game:GetService("ReplicatedStorage").Bridge:FireServer(unpack(args))
                wait(2)
            end
            end
        end
        
        local function farmMode(mode)
            while ToggleMode.Value do wait()
            local enemiesPath = workspace.Server.Enemies.Gamemodes[mode:gsub(" ", "")]
            if Plr.Character and Plr.Character:FindFirstChild("HumanoidRootPart") and Plr.Character:FindFirstChild("Humanoid") and Plr.Character.Humanoid.Health > 0 then
                local nearestNPC = nil
                local nearestDistance = math.huge
        
                for _, child in ipairs(enemiesPath:GetChildren()) do
                    if child:IsA("Part") and child:GetAttribute("Health") and child:GetAttribute("Health") > 0 then
                        local hasShield = child:FindFirstChild("Shield") ~= nil
                        local distance = (Plr.Character.HumanoidRootPart.Position - child.Position).magnitude
        
                        if (distance < nearestDistance and not hasShield) or (nearestNPC and nearestNPC:FindFirstChild("Shield")) then
                            nearestNPC = child
                            nearestDistance = distance
                        end
                    end
                end
        
                if nearestNPC then
                    if nearestDistance > 10 then
                        Plr.Character.HumanoidRootPart.CFrame = nearestNPC.CFrame * CFrame.new(0, 0, 4)
                    end
                end
                end
            end
        end
        
        ToggleMode:OnChanged(function()
            if ToggleMode.Value then
                wait()
                local selectedMode = SelectedMode.Value
                coroutine.wrap(openMode)(selectedMode)
                coroutine.wrap(farmMode)(selectedMode)
            end
        end)
        
        
        local LeaveInput = Tabs.Modes:AddInput("LeaveInput", {
            Title = "Wave to Leave",
            Default = "",
            Placeholder = "",
            Numeric = true,
            Finished = false,
            Callback = function() end
        })
        
        local ToggleLeave = Tabs.Modes:AddToggle("LeaveToggle", {Title = "Auto Leave", Default = false })
        
        ToggleLeave:OnChanged(function()
            while ToggleLeave.Value do
                wait(0.1)
                local selectedMode = SelectedMode.Value
                local modeFrame = Plr.PlayerGui.UI.HUD.Gamemodes:FindFirstChild(selectedMode:gsub(" ", ""))
                
                if modeFrame and modeFrame.Visible then
                    local waveGui = modeFrame.Frame.Frame.Title.Text
                    local currentWave = tonumber(waveGui:match("%d+"))
                    local inputWave = tonumber(LeaveInput.Value)
        
                    if currentWave == inputWave then
                        local args = {
                            [1] = "Teleport",
                            [2] = "Teleport",
                            [3] = modeTeleport[selectedMode]
                        }
                        game:GetService("ReplicatedStorage").Bridge:FireServer(unpack(args))
                        wait(2)
                    end
                end
            end
        end) 
        
        local OrbsSummon = Tabs.Summon:AddDropdown("StarDropdown", {
            Title = "World Star",
            Description = "",
            Values = availableworlds,
            Multi = false,
            Default = "--SELECT STAR--"
        })
        
        local MethodDropdown = Tabs.Summon:AddDropdown("MethodDrop", {
            Title = "Method",
            Description = "",
            Values = {"Open 1", "Open Multi"},
            Multi = false,
            Default = 1
        })
        
        local methods = {
            ["Open 1"] = "Spin",
            ["Open Multi"] = "Multi"
        }
        
        local ToggleSummon = Tabs.Summon:AddToggle("SummonToggle", {Title = "Auto Open Star", Default = false})

        ToggleSummon:OnChanged(function()
            while ToggleSummon.Value do
                wait(0.1)
                
                local debris = workspace.Debris
        
                local args = {
                    [1] = "Stars",
                    [2] = methods[MethodDropdown.Value],
                    [3] = OrbsSummon.Value
                }
                
                game:GetService("ReplicatedStorage").Bridge:FireServer(unpack(args))
                
                for i, v in ipairs(debris:GetChildren()) do
                    if v:IsA("Model") and v:FindFirstChild("Highlight") then
                        v:Destroy()
                    elseif v:IsA("Part") and debris:FindFirstChild(v.Name) then
                        v:Destroy()
                    end
                end
            end
        end)
        
        local function AddIslandButton(title, eventName)
            Tabs.Islands:AddButton({
                Title = title,
                Description = "",
                Callback = function()
                    local args = {
                        [1] = "Teleport",
                        [2] = "Teleport",
                        [3] = eventName
                    }
                    
                    game:GetService("ReplicatedStorage").Bridge:FireServer(unpack(args))                                                         
                end
            })
        end
        
        for _, area in ipairs(availableworlds) do
            AddIslandButton(area, area)
        end 

        local maingui = Plr.PlayerGui.UI:FindFirstChild("Frames")

        local function showGui(guiName)
            local gui = maingui:FindFirstChild(guiName)
            if gui then
                gui.Position = UDim2.new(0.5, 0, 0.5, 0)
                gui.Visible = true
            end
        end

        Tabs.Gui:AddButton({
            Title = "Titles Gui",
            Description = "",
            Callback = function()
                showGui("Titles")
            end
        })
        
        Tabs.Gui:AddButton({
            Title = "Breathings Gui",
            Description = "",
            Callback = function()
                showGui("Breathings")
            end
        })

        Tabs.Gui:AddButton({
            Title = "Demon Art Gui",
            Description = "",
            Callback = function()
                showGui("DemonArts")
            end
        })

        Tabs.Gui:AddButton({
            Title = "Races Gui",
            Description = "",
            Callback = function()
                showGui("Races")
            end
        })

        Tabs.Misc:AddButton({
            Title = "Redeem All Codes",
            Description = "",
            Callback = function()
                local codes = {
                    "release",
                    "1KLIKES",
                    "1KFAVS",
                    "SORRYFORSHUTDOWN",
                    "BUGSFIX",
                    "MINIUPDATE",
                    "5KLIKES"
                }
        
                for _, code in ipairs(codes) do
                    local args = {
                        [1] = "Codes",
                        [2] = "Redeem",
                        [3] = code
                    }
                    
                    game:GetService("ReplicatedStorage").Bridge:FireServer(unpack(args))
                    wait(1)                    
                end
            end
        })

        local AntiAfkToggle = Tabs.Misc:AddToggle("AfkToggle", {Title = "Anti Afk", Default = false})

        AntiAfkToggle:OnChanged(function()
            while AntiAfkToggle.Value do
                wait(600)
                game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.Space, false, game)
                wait(0.1)
                game:GetService("VirtualInputManager"):SendKeyEvent(false, Enum.KeyCode.Space, false, game)
            end
        end)

        local FruitToggle = Tabs.Misc:AddToggle("FruitToggle", {Title = "Auto Collect Fruit", Default = false})

        FruitToggle:OnChanged(function()
            while FruitToggle.Value do
                wait(0.1)
                for i, v in ipairs(workspace.Server.ItemSpawn:GetChildren()) do
                    if v:IsA("Part") and v:FindFirstChild("Prompt") then
                        local platform = Instance.new("Part")
                        platform.Size = Vector3.new(20, 1, 20)
                        platform.Position = v.Position - Vector3.new(0, 4, 0)
                        platform.Anchored = true
                        platform.Parent = workspace
                        Hrp.CFrame = v.CFrame
                        v.Prompt.HoldDuration = 0
                        game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.E, false, game)
                    end
                end
            end
        end)
        
        local AuraToggle = Tabs.Misc:AddToggle("AurToggle", {Title = "Auto Evolve Aura", Default = false})

        AuraToggle:OnChanged(function()
            while AuraToggle.Value do
                wait(0.1)
                local function findGuiElement(path)
                    local element = Plr.PlayerGui
                    for segment in path:gmatch("[^%.]+") do
                        element = element and element:FindFirstChild(segment) or nil
                    end
                    return element
                end
        
                local function extractNumbers(text)
                    return tonumber(text:match("%d+"))
                end
        
                local HUDTextLabel = findGuiElement("UI.Frames.Inventory.Frame.Content.Frame.List.Amethyst.Frame.Amount")
                local ascensionPriceLabel = findGuiElement("UI.Frames.Auras.Frame.Container.Price.Frame.Container.Price")
        
                if HUDTextLabel and ascensionPriceLabel then
                    local HUDValue = extractNumbers(HUDTextLabel.Text)
                    local ascensionPriceValue = extractNumbers(ascensionPriceLabel.Text)
        
                    if HUDValue and ascensionPriceValue and HUDValue >= ascensionPriceValue then
                        game:GetService("ReplicatedStorage").Bridge:FireServer("Auras", "Evolve")
                    end
                end
            end
        end)
        
        
        local AsensionToggle = Tabs.Misc:AddToggle("AscensToggle", {Title = "Auto Ascension", Default = false})

        AsensionToggle:OnChanged(function()
            while AsensionToggle.Value do
                wait(0.1)
                local function findGuiElement(path)
                    local element = Plr.PlayerGui
                    for segment in path:gmatch("[^%.]+") do
                        element = element and element:FindFirstChild(segment) or nil
                    end
                    return element
                end
        
                local function extractNumbers(text)
                    return tonumber(text:match("%d+"))
                end
        
                local HUDTextLabel = findGuiElement("UI.HUD.Left.Energy.Background.Amount")
                local ascensionPriceLabel = findGuiElement("UI.Frames.Ascension.Frame.Container.Price.Frame.Container.Price")
        
                if HUDTextLabel and ascensionPriceLabel then
                    local HUDValue = extractNumbers(HUDTextLabel.Text)
                    local ascensionPriceValue = extractNumbers(ascensionPriceLabel.Text)
        
                    if HUDValue and ascensionPriceValue and HUDValue >= ascensionPriceValue then
                        game:GetService("ReplicatedStorage").Bridge:FireServer("Ascension", "Evolve")
                    end
                end
            end
        end)

        Tabs.Misc:AddSection("Avatar Evolve")
        local EvolveDrop = Tabs.Misc:AddDropdown("EvolDrop", {
            Title = "Select Avatar",
            Description = "",
            Values = {"Lucce", "Josuko", "Norute", "Belme", "Paen", "Jonathen", "Picoli", "Niko", "Tobe", "Sanje", "Gohim", "Nezuki", "Zenetso", "Tanjero", "Jotare", "Giorne", "Goko", "Madare", "Zore", "Gyomi", "Sasuko", "Deo", "Vegeto Ultra", "Yoreche", "Lufi"},
            Multi = false,
            Default = 1
        })

        local EvolveToggle = Tabs.Misc:AddToggle("EvolvToggle", {Title = "Auto Evolve", Default = false})

        EvolveToggle:OnChanged(function()
                while EvolveToggle.Value do
                wait(0.1)
                if Plr.PlayerGui.UI.Notifications.Visible then
                    local args = {
                        [1] = "Skins",
                        [2] = "Evolve",
                        [3] = EvolveDrop.Value
                    }
                    
                    game:GetService("ReplicatedStorage").Bridge:FireServer(unpack(args))                    
                    Plr.PlayerGui.UI.Notifications.Visible = false
                    wait(4)
                    Plr.PlayerGui.UI.Notifications.Visible = true
                end               
            end
        end)
        
        Tabs.Misc:AddSection("Player")
        local Input = Tabs.Misc:AddInput("NameInput", {
            Title = "Custom Name",
            Default = "LyzerOnTop",
            Placeholder = "",
            Numeric = false,
            Finished = false,
            Callback = function(Value)
            end
        })
        
        Input:OnChanged(function()
            local name = Input.Value
            local topbar = Char.HumanoidRootPart.PlayerHUD.Username
            if topbar and topbar:IsA("TextLabel") then
                topbar.Text = name
            end
        end)

        local WebookInput = Tabs.Webhook:AddInput("WebInput", {
            Title = "Webhook Link",
            Default = "",
            Placeholder = "",
            Numeric = false,
            Finished = false,
            Callback = function()
            end
        })
        
        local Colorpicker = Tabs.Webhook:AddColorpicker("Colorpicker", {
            Title = "Webhook Color",
            Default = Color3.fromRGB(255, 0, 0)
        })

        Tabs.Webhook:AddButton({
            Title = "Webhook Test",
            Description = "",
            Callback = function()
                local embedcolor = Colorpicker.Value
                local hexColor = string.format("%02X%02X%02X", embedcolor.R * 255, embedcolor.G * 255, embedcolor.B * 255)
                local webhook = tostring(WebookInput.Value)
                local Webhook_URL = webhook
                local ImageUrl = ""

                local Headers = {
                    ['Content-Type'] = 'application/json',
                }

                local currentTime = os.time()
                currentTime = currentTime + (1 * 3600)
                currentTime = os.date("%Y-%m-%d %H:%M:%S", currentTime)

                local data = {
                    ["embeds"] = {
                        {
                            ["title"] = "Working!",
                            ["description"] = "discord.gg/lyzer",
                            ["type"] = "rich",
                            ["color"] = tonumber("0x" .. hexColor),
                            ["fields"] = {
                                {
                                    ["name"] = "Executor:",
                                    ["value"] = sidentifyexecutor(),
                                    ["inline"] = false,
                                },
                            },
                            ["image"] = {
                                ["url"] = ImageUrl
                            }
                        },
                    },
                }

                local PlayerData = game:GetService('HttpService'):JSONEncode(data)

                local Request = http_request or request or HttpPost or syn.request
                Request({Url = Webhook_URL, Body = PlayerData, Method = "POST", Headers = Headers})
            end
        })
        
        Tabs.Webhook:AddSection("Webhook Options")
        local FruitWebToggle = Tabs.Webhook:AddToggle("FruitHookToggle", {
            Title = "Send Fruit Spawn",
            Default = false
        })
        
        FruitWebToggle:OnChanged(function()
            while FruitWebToggle.Value do
                wait()
                for i, v in ipairs(workspace.Server.ItemSpawn:GetChildren()) do
                    if v:IsA("Part") and v:FindFirstChild("Prompt") then
                        wait(1)
                        local notifications = game.Players.LocalPlayer.PlayerGui.UI.Notifications
        
                        for _, descendant in ipairs(notifications:GetDescendants()) do
                            if descendant:IsA("TextLabel") and descendant.Text:sub(1, 8) == "[FRUITS]" then
                                local embedcolor = Colorpicker.Value
                                local hexColor = string.format("%02X%02X%02X", math.floor(embedcolor.R * 255), math.floor(embedcolor.G * 255), math.floor(embedcolor.B * 255))
                                
                                local webhook = tostring(WebookInput.Value)
                                local Webhook_URL = webhook
                                local ImageUrl = "https://cdn.discordapp.com/attachments/688888252333293819/1249893512950976572/standard_11.gif?ex=668007cb&is=667eb64b&hm=9ef44479b9530ebb26f556804c8cbc3cae85b49e405c858c0e805f47933922ed&"
                
                                local Headers = {
                                    ['Content-Type'] = 'application/json',
                                }
                
                                local currentTime = os.time()
                                currentTime = currentTime + (1 * 3600)
                                currentTime = os.date("%Y-%m-%d %H:%M:%S", currentTime)
                
                                local data = {
                                    ["embeds"] = {
                                        {
                                            ["title"] = descendant.Text,
                                            ["description"] = "Display Name: " .. "(||" .. game.Players.LocalPlayer.DisplayName .. "||)" .. " Name: " .. "(||" .. game.Players.LocalPlayer.Name .. "||)",
                                            ["type"] = "rich",
                                            ["color"] = tonumber("0x" .. hexColor),
                                            ["fields"] = {
                                                {
                                                    ["name"] = "Executor:",
                                                    ["value"] = identifyexecutor(),
                                                    ["inline"] = false,
                                                },
                                            },
                                            ["image"] = {
                                                ["url"] = ImageUrl
                                            }
                                        },
                                    },
                                }
                
                                local PlayerData = game:GetService('HttpService'):JSONEncode(data)
                
                                local Request = http_request or request or HttpPost or syn.request
                                Request({Url = Webhook_URL, Body = PlayerData, Method = "POST", Headers = Headers})
        
                                v.AncestryChanged:Wait()
                            end
                        end
                    end
                end
            end
        end)


Tabs.Misc:AddSection("JobId")
local InputJobId = Tabs.Misc:AddInput("JobInput", {
    Title = "JobId",
    Default = "",
    Placeholder = "",
    Numeric = false,
    Finished = false,
    Callback = function()
    end
})

Tabs.Misc:AddButton({
    Title = "Copy JobId",
    Description = "",
    Callback = function()
        Fluent:Notify({
            Title = "JobId",
            Content = "Copied to Clipboard!",
            SubContent = "",
            Duration = 3
        })
        toclipboard(game.JobId)
    end
})

Tabs.Misc:AddButton({
    Title = "Teleport to JobId",
    Description = "",
    Callback = function()
        local jobidinput = tostring(InputJobId.Value)
        game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, jobidinput, game.Players.LocalPlayer)
    end
})

Tabs.Misc:AddSection("Server Hop")
Tabs.Misc:AddButton({
    Title = "Server Hop Leastest Players",
    Description = "",
    Callback = function()
        loadstring(game:HttpGet("https://pastebin.com/raw/bDb5LWgm"))()
    end
})
Tabs.Misc:AddButton({
    Title = "Rejoin Current Server",
    Description = "",
    Callback = function()
        game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId, game.Players.LocalPlayer)
    end
})

        Tabs.Info:AddParagraph({
            Title = "Updated 06/29",
            Content = "+Added Auto Evolve Aura\n+Added Open Guis Tab\n+Custom Interface Color"
        })

        Tabs.Info:AddParagraph({
            Title = "Supported Executors",
            Content = "-Wave \n-Solara \n-Fluxus \n-Codex \n-Arceus X \n-Delta \n-Vega X \n-Trigon Evo"
        })

        Tabs.Info:AddButton({
            Title = "Discord",
            Description = "Copy Discord Hub link",
            Callback = function()
                Fluent:Notify({
                    Title = "Discord",
                    Content = "Link copied to your clipboard!",
                    SubContent = "",
                    Duration = 3
                })
                toclipboard("https://discord.gg/lyzer")
            end
        })

        for _, child in pairs(game:GetService("CoreGui"):GetChildren()) do
            if child.Name == "TrueFalseUi" then
                child:Destroy()
            end
        end

        Tabs.Settings:AddSection("Custom Interface")
        local PickerInterface = Tabs.Settings:AddColorpicker("ColorInterfacepicker", {
            Title = "Interface Color",
            Default = Color3.fromRGB(47, 154, 255)
        })

        local InterfaceToggle = Tabs.Settings:AddToggle("InterToggle", { Title = "Set Interface Color", Default = false })

        InterfaceToggle:OnChanged(function()
            while InterfaceToggle.Value do wait()
                game.CoreGui.ScreenGui:GetChildren()[2].Frame.Background.BackgroundColor3 = PickerInterface.Value
            end
        end)
        
        local ThunderScreen = Instance.new("ScreenGui")
        local ThunderToggleUI = Instance.new("TextButton")
        local ThunderCornerUI = Instance.new("UICorner")
        local ThunderImageUI = Instance.new("ImageLabel")
        
        ThunderScreen.Name = "TrueFalseUi"
        ThunderScreen.Parent = game.CoreGui
        ThunderScreen.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
        
        ThunderToggleUI.Name = "ThunderToggleUI"
        ThunderToggleUI.Parent = ThunderScreen
        ThunderToggleUI.BackgroundColor3 = Color3.fromRGB(31, 31, 31)
        ThunderToggleUI.BorderSizePixel = 0
        ThunderToggleUI.Position = UDim2.new(0.2, -50, 0.1, -25)
        ThunderToggleUI.Size = UDim2.new(0, 50, 0, 50)
        ThunderToggleUI.Font = Enum.Font.FredokaOne
        ThunderToggleUI.Text = ""
        ThunderToggleUI.TextColor3 = Color3.fromRGB(0, 0, 0)
        ThunderToggleUI.TextSize = 14.000
        ThunderToggleUI.Draggable = true
        
        ThunderCornerUI.Name = "ThunderCornerUI"
        ThunderCornerUI.Parent = ThunderToggleUI
        
        ThunderImageUI.Name = "MODILEMAGE"
        ThunderImageUI.Parent = ThunderToggleUI
        ThunderImageUI.BackgroundColor3 = Color3.fromRGB(192, 192, 192)
        ThunderImageUI.BackgroundTransparency = 1.000
        ThunderImageUI.BorderSizePixel = 0
        ThunderImageUI.Position = UDim2.new(0.0, 0, 0.0, 0)
        ThunderImageUI.Size = UDim2.new(0, 50, 0, 50)
        ThunderImageUI.Image = "rbxassetid://17506868949"
        
        ThunderToggleUI.MouseButton1Click:Connect(function()
            Window:Minimize()
        end)
        
        local dragging = false
        local dragInput, mousePos, framePos
        
        local function updateInput(input)
            local delta = input.Position - mousePos
            ThunderToggleUI.Position = UDim2.new(
                framePos.X.Scale,
                framePos.X.Offset + delta.X,
                framePos.Y.Scale,
                framePos.Y.Offset + delta.Y
            )
        end
        
        ThunderToggleUI.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                mousePos = input.Position
                framePos = ThunderToggleUI.Position
        
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                    end
                end)
            end
        end)
        
        ThunderToggleUI.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseMovement then
                dragInput = input
            end
        end)
        
        game:GetService("UserInputService").InputChanged:Connect(function(input)
            if input == dragInput and dragging then
                updateInput(input)
            end
        end)

        loadstring(game:HttpGet("https://pastebin.com/raw/JziBTEbZ"))()
        loadstring(game:HttpGet("https://pastebin.com/raw/xGzvr7Lw"))()
        print("Discord Server: https://discord.gg/lyzer")
        
    
    
    SaveManager:SetLibrary(Fluent)
    InterfaceManager:SetLibrary(Fluent)
    SaveManager:IgnoreThemeSettings()
    SaveManager:SetIgnoreIndexes({})
    InterfaceManager:SetFolder("LyzerHub")
    SaveManager:SetFolder("LyzerHub/AnimeHeroes")
    InterfaceManager:BuildInterfaceSection(Tabs.Settings)
    SaveManager:BuildConfigSection(Tabs.Settings)
    Window:SelectTab()
    SaveManager:LoadAutoloadConfig()
